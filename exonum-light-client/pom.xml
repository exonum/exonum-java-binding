<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.exonum.client</groupId>
  <artifactId>exonum-light-client</artifactId>
  <version>0.7.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Exonum Java Light Client</name>
  <description>
    The Exonum light client library to work with Exonum blockchain.
    Can be used to create and submit transactions to blockchain.
  </description>
  <url>https://github.com/exonum/exonum-java-binding/tree/master/exonum-light-client</url>
  <organization>
    <name>Exonum</name>
    <url>https://exonum.com/</url>
  </organization>
  <licenses>
    <license>
      <name>The Apache License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <id>dmitry-timofeev</id>
      <name>Dmitry Timofeev</name>
      <url>https://github.com/dmitry-timofeev</url>
    </developer>

    <developer>
      <id>bullet-tooth</id>
      <name>Oleg Bondar</name>
      <url>https://github.com/bullet-tooth</url>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:https://github.com/exonum/exonum-java-binding.git</connection>
    <developerConnection>scm:git:git@github.com:/exonum/exonum-java-binding.git</developerConnection>
    <url>https://github.com/exonum/exonum-java-binding</url>
    <tag>HEAD</tag>
  </scm>
  <issueManagement>
    <system>github</system>
    <url>https://github.com/exonum/exonum-java-binding/issues</url>
  </issueManagement>
  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <properties>
    <!-- Project configuration -->
    <ejb.version>0.10.0</ejb.version>
    <java.compiler.release>8</java.compiler.release>
    <javadoc.source>8</javadoc.source>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- Project dependencies -->
    <okhttp.version>4.7.2</okhttp.version>
    <lombok.version>1.18.12</lombok.version>
    <!--Test dependencies-->
    <junit.jupiter.version>5.6.2</junit.jupiter.version>
    <mockito.version>3.4.4</mockito.version>
    <hamcrest.version>2.2</hamcrest.version>
    <equalsverifier.version>3.5.2</equalsverifier.version>
    <!--Plugins-->
    <!-- Checkstyle -->
    <checkstyle.severity>warning</checkstyle.severity>
    <!-- Default values of properties set by Jacoco when coverage is enabled.
    Passed to the JVM running tests. -->
    <jacoco.args></jacoco.args>
    <jacoco.reports-path>${project.build.directory}/coverage-reports</jacoco.reports-path>
    <!-- Skip generating Javadocs by default. Some profiles override this.  -->
    <maven.javadoc.skip>true</maven.javadoc.skip>
    <sonar.java.source>${java.compiler.release}</sonar.java.source>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.jupiter.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.exonum.binding</groupId>
      <artifactId>exonum-java-binding-common</artifactId>
      <version>${ejb.version}</version>
    </dependency>

    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>okhttp</artifactId>
      <version>${okhttp.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- An empty artifact, required while JUnit 4 is on the classpath (from mockwebserver)
         to override its dependency on hamcrest.

         See http://hamcrest.org/JavaHamcrest/distributables#upgrading-from-hamcrest-1x
     -->
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>mockwebserver</artifactId>
      <version>${okhttp.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>nl.jqno.equalsverifier</groupId>
      <artifactId>equalsverifier</artifactId>
      <version>${equalsverifier.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <showWarnings>true</showWarnings>
          <release>${java.compiler.release}</release>
        </configuration>
      </plugin>

      <!-- Checkstyle plugin is run during validate phase (before javac) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <configLocation>${project.basedir}/../checkstyle.xml</configLocation>
          <suppressionsLocation>${project.basedir}/checkstyle-suppressions.xml</suppressionsLocation>
          <propertyExpansion>checkstyle.severity=${checkstyle.severity}</propertyExpansion>
          <linkXRef>false</linkXRef>
        </configuration>
        <executions>
          <execution>
            <id>check-java-code-style</id>
            <phase>validate</phase>
            <configuration>
              <encoding>UTF-8</encoding>
              <consoleOutput>true</consoleOutput>
              <failsOnError>true</failsOnError>
              <includeTestSourceDirectory>true</includeTestSourceDirectory>
            </configuration>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>8.19</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <argLine>
            ${jacoco.args}
          </argLine>
          <!-- Set up JUnit 5 configuration parameters.
          See also: https://junit.org/junit5/docs/current/user-guide/#running-tests-build-maven-config-params -->
          <properties>
            <configurationParameters>
              # Enable parallel execution, with concurrent mode by default
              junit.jupiter.execution.parallel.enabled = true
              junit.jupiter.execution.parallel.mode.default = concurrent

              # Use 1.5 times the number of CPUs
              junit.jupiter.execution.parallel.config.dynamic.factor = 1.5
            </configurationParameters>
          </properties>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <source>${javadoc.source}</source>
          <doclint>none</doclint>
          <detectOfflineLinks>false</detectOfflineLinks>
          <!-- Allow fetching external resources to generate links -->
          <isOffline>false</isOffline>
          <links>
            <link>https://exonum.com/doc/api/java-binding/${ejb.version}</link>
          </links>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok-maven-plugin</artifactId>
        <version>1.18.12.0</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>delombok</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.pitest</groupId>
        <artifactId>pitest-maven</artifactId>
        <version>1.5.2</version>
        <dependencies>
          <dependency>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-junit5-plugin</artifactId>
            <version>0.12</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- A build profile for a build performed on a CI server:
        - Fails if the code has style issues
        - Collects test coverage information
 -->
    <profile>
      <id>ci-build</id>
      <properties>
        <checkstyle.severity>error</checkstyle.severity>
        <jacoco.args>${argLine}</jacoco.args>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.8.5</version>
            <configuration>
              <excludes>
                <!--
                Exclude lombok annotated classes which are located at `src/main/lombok`,
                because the plugin can't be configured to look for sources there.

                We ignore the whole package as there are little to no non-lombok classes.
                -->
                <exclude>com/exonum/client/response/*</exclude>
              </excludes>
            </configuration>
            <executions>
              <execution>
                <id>prepare-jacoco-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <destFile>${jacoco.reports-path}/jacoco-unit.exec</destFile>
                </configuration>
              </execution>
              <execution>
                <id>generate-jacoco-report</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>report</goal>
                </goals>
                <configuration>
                  <dataFile>${jacoco.reports-path}/jacoco-unit.exec</dataFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Profile used during deploy:
       - Generates Javadocs.
       - Signs the artefacts.
       - Deploys them to the remote repository. -->
    <profile>
      <id>deploy-sign-artifacts</id>
      <properties>
        <maven.javadoc.skip>false</maven.javadoc.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>3.0.0-M3</version>
            <executions>
              <execution>
                <id>check-release-build-prerequisites</id>
                <phase>validate</phase>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireJavaVersion>
                      <version>[13.,)</version>
                      <message>
                        Java 13 is the minimum version where JLC Javadocs can be built.
                      </message>
                    </requireJavaVersion>
                  </rules>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
                <configuration>
                  <!--It is needed for correct gpg signing with gpg 2.1-->
                  <gpgArguments>
                    <arg>--pinentry-mode</arg>
                    <arg>loopback</arg>
                  </gpgArguments>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>
            <version>2.8.2</version>
            <executions>
              <execution>
                <id>default-deploy</id>
                <phase>deploy</phase>
                <goals>
                  <goal>deploy</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
