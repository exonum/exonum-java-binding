<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.exonum.binding</groupId>
  <artifactId>exonum-java-binding</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>exonum-java-binding</name>
  <url>https://github.com/exonum/exonum-java-binding</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <rust.compiler.version>stable</rust.compiler.version>
    <rust.compiler.features>resource-manager</rust.compiler.features>
    <java.compiler.source>8</java.compiler.source>
    <java.compiler.target>8</java.compiler.target>
    <!-- Intentionally left empty, may be overrided from command line.
         See README.md and http://errorprone.info/docs/flags for more. -->
    <java.compiler.errorprone.flag></java.compiler.errorprone.flag>
    <java.compiler.errorprone.patchChecksFlag>MissingOverride,DeadException</java.compiler.errorprone.patchChecksFlag>
    <!-- Enables Java assertions, used in unit and integration tests -->
    <java.vm.assertionFlag>-ea:com.exonum.binding...</java.vm.assertionFlag>
    <build.nativeLibPath>rust/target/debug</build.nativeLibPath>
    <checkstyle.configLocation>checkstyle.xml</checkstyle.configLocation>
    <checkstyle.severity>warning</checkstyle.severity>
    <powermock.version>1.7.0</powermock.version>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <!-- Enables Error Prone (http://errorprone.info/docs) during compilation. -->
          <compilerId>javac-with-errorprone</compilerId>
          <showWarnings>true</showWarnings>
          <forceJavacCompilerUse>true</forceJavacCompilerUse>
          <compilerArgs>
            <arg>${java.compiler.errorprone.flag}</arg>
          </compilerArgs>
          <source>${java.compiler.source}</source>
          <target>${java.compiler.target}</target>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-compiler-javac-errorprone</artifactId>
            <version>2.8.2</version>
          </dependency>
          <!-- override plexus-compiler-javac-errorprone's dependency on
               Error Prone with the latest version -->
          <dependency>
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_core</artifactId>
            <version>2.0.21</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <!-- A configuration shared across multiple executions -->
        <configuration>
          <executable>cargo</executable>
          <workingDirectory>rust/</workingDirectory>
        </configuration>
        <executions>
          <!-- Each execution has its own configuration for
               we need to execute cargo during various phases (e.g., clean, compile).
               Correspondences between Maven and Cargo phases:
                | Maven   | Cargo |
                | clean   | clean |
                | compile | build |
                | test    | test  |  -->
          <execution>
            <!-- currently we build a rust lib during 'compile' phase as integration tests depend on the library -->
            <id>build-rust-lib</id>
            <phase>compile</phase>
            <configuration>
              <arguments>
                <argument>+${rust.compiler.version}</argument>
                <argument>build</argument>
                <argument>--features</argument>
                <argument>${rust.compiler.features}</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>test-rust-lib</id>
            <phase>test</phase>
            <configuration>
              <arguments>
                <argument>+${rust.compiler.version}</argument>
                <argument>test</argument>
                <argument>--features</argument>
                <argument>${rust.compiler.features}</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>clean-rust-target</id>
            <phase>clean</phase>
            <configuration>
              <arguments>
                <argument>clean</argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Checkstyle plugin is run during validate phase (before javac) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>2.17</version>
        <configuration>
          <configLocation>${checkstyle.configLocation}</configLocation>
          <propertyExpansion>checkstyle.severity=${checkstyle.severity}</propertyExpansion>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <configuration>
              <encoding>UTF-8</encoding>
              <consoleOutput>true</consoleOutput>
              <failsOnError>true</failsOnError>
              <includeTestSourceDirectory>true</includeTestSourceDirectory>
              <linkXRef>false</linkXRef>
            </configuration>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.puppycrawl.tools</groupId>
            <artifactId>checkstyle</artifactId>
            <version>8.0</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.20</version>
        <configuration>
          <excludes>
            <exclude>**/*IntegrationTest.java</exclude>
          </excludes>
          <argLine>${java.vm.assertionFlag}</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.20</version>
        <configuration>
          <includes>
            <include>**/*IntegrationTest.java</include>
          </includes>
          <argLine>-Djava.library.path=${build.nativeLibPath} -Xcheck:jni ${java.vm.assertionFlag}</argLine>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <!-- Use this profile to produce a patch with suggested fixes,
           e.g. `mvn compile -P fixerrors`. See README.md for more.
        -->
      <id>fixerrors</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <compilerArgs combine.children="append">
                <compilerArg>-XepPatchLocation:${basedir}</compilerArg>
                <compilerArg>-XepPatchChecks:${java.compiler.errorprone.patchChecksFlag}</compilerArg>
              </compilerArgs>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>22.0</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>2.8.47</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito2</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
