#!/usr/bin/env bash
# Prepare environment variables for building and running tests.
# This requires executables and libraries to be able to find libjvm and Rust stdlib.
#
# Â¡Keep it MacOS/Ubuntu compatible!
#
# This profile contains:
# - JAVA_HOME - path to currently selected JDK, required to build jni-rs
#   with the invocation feature.
# - JAVA_LIB_DIR - path to libjvm.
# - RUST_LIB_DIR - path to Rust stdlib.
# - RUST_COMPILER_VERSION - Rust version for building tests.
# - RUSTFLAGS - Rust build options augmented with "rpath" option for JAVA_LIB_DIR and RUST_LIB_DIR.
#   These options will make the linker add paths to the libjvm and the Rust standard library
#   to the runtime search paths.
#
#   The runtime search paths, set by "rpath" option, work similarly on Linux and MacOS.
#   On Linux the linker adds the entries to RUNPATH section in the binary, which is scanned
#   after LD_LIBRARY_PATH. [1]
#   On MacOS the linker adds load commands with paths to the libraries to the end
#   of the runtime search list. Therefore, the load commands for these libraries
#   *at the beginning* (@rpath/libNAME.dylib entries) will succeed in case the library is
#   available in the default system directories or in LD_LIBRARY_PATH. [2]
#
#   If you need to override the libjvm, set LD_LIBRARY_PATH to specify the path to it.
#
#   "rpath" option in RUSTFLAGS variable affects all executables and dynamic libraries
#   we build: the application, integration tests, libjava_bindings shared library.
#
#   It is worth mentioning that recent releases of MacOS with enabled by default SIP
#   clear LD_LIBRARY_PATH when new shell started.
#   Such behavior greatly affects Maven and all that it runs.
#   Setting rpath is a good way to fix this flaw in tests.
#   On Linux, it is not important whether to prefer RUNPATH or LD_LIBRARY_PATH.
#
# [1] https://amir.rachum.com/blog/2016/09/17/shared-libraries/#runtime-search-path
# [2] https://github.com/aidansteele/osx-abi-macho-file-format-reference#header-structure-and-load-commands


# Use the Java that Maven uses.
#
# Unfortunately, a simple `which java` will not work for some users (e.g., jenv),
# hence this a bit complex thing.
export JAVA_HOME="$(java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home' | awk '{print $3}')"
echo "JAVA_HOME=${JAVA_HOME}"

# Find the directory containing libjvm (the relative path has changed in Java 9).
export JAVA_LIB_DIR="$(find ${JAVA_HOME} -type f -name libjvm.\* | xargs -n1 dirname)"
echo "JAVA_LIB_DIR=${JAVA_LIB_DIR}"

# Version of Rust used to build tests.
## Stable works well unless you want benchmarks.
# TODO: stable does not work well until ECR-1839 is resolved
export RUST_COMPILER_VERSION="${RUST_COMPILER_VERSION:-stable}"
echo "RUST_COMPILER_VERSION: ${RUST_COMPILER_VERSION}"

# Find the directory containing Rust libstd.
export RUST_LIB_DIR=$(rustup run ${RUST_COMPILER_VERSION} rustc --print sysroot)/lib
echo "RUST_LIB_DIR: ${RUST_LIB_DIR}"

# Linking options with additional paths for the application and tests.
# Note: `-C link-args` can be used only once, therefore, `-C link-arg` is used.
# Currently we don't support stacking of RUSTFLAGS with a user environment RUSTFLAGS,
# since this profile may be reused many times during a user session and because of this
# RUSTFLAGS can accumulate old and irrelevant options values.
NEW_RUSTFLAGS="\
 -C link-arg=-Wl,-rpath,${RUST_LIB_DIR}\
 -C link-arg=-Wl,-rpath,${JAVA_LIB_DIR}"

if [[ "${RUSTFLAGS:-}" != "" && "${RUSTFLAGS}" != "${NEW_RUSTFLAGS}" ]]; then
    echo "[WARNING]: RUSTFLAGS variable is set and will be overridden. If you need to pass \
extra compiler flags, edit 'tests_profile' script."
    echo "Set RUSTFLAGS=${RUSTFLAGS}"
    echo "New RUSTFLAGS=${NEW_RUSTFLAGS}"
fi
export RUSTFLAGS="${NEW_RUSTFLAGS}"
echo "RUSTFLAGS=${RUSTFLAGS}"
