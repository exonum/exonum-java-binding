<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.exonum.binding</groupId>
    <artifactId>exonum-java-binding-parent</artifactId>
    <version>0.7.0-SNAPSHOT</version>
  </parent>

  <artifactId>exonum-java-binding-core</artifactId>
  <version>0.7.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Exonum Java Binding: Core</name>
  <description>
    A library that contains the APIs to define and implement an Exonum service.
  </description>

  <properties>
    <project.build.headersDirectory>${project.build.directory}/native-headers</project.build.headersDirectory>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <rust.compiler.version>stable</rust.compiler.version>
    <!-- Features for integration testing. At least "resource-manager" is required by Java integration tests. Ideally,
     keeping them in sync with the ones that `integration_tests` crate require from the `java_bindings` crate allows
     the native integration tests to avoid recompilation of the `java_binding` library. -->
    <rust.compiler.features>resource-manager invocation</rust.compiler.features>
    <rust.itSubCrate>integration_tests</rust.itSubCrate>
    <rust.appSubCrate>exonum-java</rust.appSubCrate>
    <!-- The build directory of Rust workspace  -->
    <rust.build.directory>${project.basedir}/rust/target</rust.build.directory>
    <!--A directory containing libjava_bindings native library-->
    <build.nativeLibPath>${rust.build.directory}/${build.mode}</build.nativeLibPath>
    <!--A directory containing native dynamic libraries used by the App-->
    <packaging.native>${rust.build.directory}/${build.mode}/lib/native</packaging.native>
    <auto-value.version>1.6.5</auto-value.version>
    <!-- Skip building Rust library for tests -->
    <doNotBuildRustLib>false</doNotBuildRustLib>
    <!-- This flag is empty for debug builds and equals to `release` otherwise -->
    <build.cargoFlag></build.cargoFlag>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.exonum.binding</groupId>
      <artifactId>exonum-java-binding-common</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
      <version>${vertx.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guice.version}</version>
      <classifier>no_aop</classifier>
    </dependency>

    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value-annotations</artifactId>
      <version>${auto-value.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.auto.value</groupId>
      <artifactId>auto-value</artifactId>
      <version>${auto-value.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.ryanharter.auto.value</groupId>
      <artifactId>auto-value-gson-runtime</artifactId>
    </dependency>

    <dependency>
      <groupId>com.ryanharter.auto.value</groupId>
      <artifactId>auto-value-gson</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.pf4j</groupId>
      <artifactId>pf4j</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito2</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.exonum.binding</groupId>
      <artifactId>exonum-java-testing</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava-testlib</artifactId>
      <version>${guava.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>nl.jqno.equalsverifier</groupId>
      <artifactId>equalsverifier</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <!-- Make it possible to add arguments in the parent configuration.
               Default is "merge" which will discard any <arg> child elements in the parent. -->
          <compilerArgs combine.children="append">
            <arg>-h</arg>
            <arg>${project.build.headersDirectory}</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <!-- A configuration shared across multiple executions -->
        <configuration>
          <executable>cargo</executable>
          <workingDirectory>${project.basedir}/rust/</workingDirectory>
        </configuration>
        <executions>
          <!-- Each execution has its own configuration for
               we need to execute cargo during various phases (e.g., compile).

               Correspondences between Maven and Cargo phases:
                | Maven   | Cargo |
                | compile | build |
                | test    | test  |

               Clean does not work reliably in a multi-module project and, therefore,
               not supported. -->
          <execution>
            <!-- We build a rust lib during 'compile' phase as Java integration tests
                 depend on the library. The library is built with resource-manager feature
                 enabled to detect possible errors with handle management. -->
            <id>build-rust-lib-for-tests</id>
            <phase>compile</phase>
            <configuration>
              <arguments>
                <argument>+${rust.compiler.version}</argument>
                <argument>build</argument>
                <argument>--features</argument>
                <argument>${rust.compiler.features}</argument>
                <argument>--color</argument>
                <argument>always</argument>
              </arguments>
              <skip>${doNotBuildRustLib}</skip>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>

          <!-- Run the unit-tests of the Rust library with resource-manager feature enabled. -->
          <execution>
            <id>test-rust-lib</id>
            <phase>test</phase>
            <configuration>
              <arguments>
                <argument>+${rust.compiler.version}</argument>
                <argument>test</argument>
                <argument>--features</argument>
                <argument>${rust.compiler.features}</argument>
                <argument>--all</argument>
                <argument>--exclude</argument>
                <argument>${rust.itSubCrate}</argument>
                <argument>--color</argument>
                <argument>always</argument>
              </arguments>
              <skip>${skipTests}</skip>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <!--We need to copy libjava_bindings dynamic library to the <exonum-java-location>/lib/native directory-->
          <execution>
            <id>copy-native-lib</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${packaging.native}</outputDirectory>
              <resources>
                <resource>
                  <directory>${build.nativeLibPath}</directory>
                  <includes>
                    <include>libjava_bindings.so</include>
                    <include>libjava_bindings.dylib</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>test-compile</goal>
            </goals>
            <configuration>
              <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <configLocation>${project.parent.basedir}/../checkstyle.xml</configLocation>
          <suppressionsLocation>${project.basedir}/checkstyle-suppressions.xml</suppressionsLocation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/*IntegrationTest.java</exclude>
          </excludes>
          <argLine>
            ${jacoco.args}
            ${java.vm.assertionFlag}
          </argLine>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*IntegrationTest.java</include>
          </includes>
          <argLine>${jacoco.it.args}
                   -Djava.library.path=${build.nativeLibPath}
                   -Xcheck:jni
                   ${java.vm.assertionFlag}
                   -Xss1500k
          </argLine>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <configuration>
          <effort>max</effort>
          <threshold>medium</threshold>
          <excludeFilterFile>${project.basedir}/findbugs-exclude.xml</excludeFilterFile>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
      </plugin>
    </plugins>
    <extensions>
      <!-- Use an extension that sets the OS classifier, required to locate
           the correct protoc executable -->
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.6.2</version>
      </extension>
    </extensions>
  </build>

  <profiles>
    <!-- A build profile for a build performed on a CI server:
           - Fails if the code has style issues
           - Runs FindBugs during verify phase
           - Runs unit tests of the Rust library without resource-manager feature
     -->
    <profile>
      <id>ci-build</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>spotbugs-during-verify</id>
                <phase>verify</phase>
                <goals>
                  <goal>check</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.6.0</version>
            <executions>
              <!-- Run the unit-tests of the Rust library without resource-manager feature. -->
              <execution>
                <id>test-rust-lib-no-resource-manager</id>
                <phase>test</phase>
                <configuration>
                  <arguments>
                    <argument>+${rust.compiler.version}</argument>
                    <argument>test</argument>
                    <argument>--all</argument>
                    <argument>--exclude</argument>
                    <argument>${rust.itSubCrate}</argument>
                    <!-- Exonum Java app depends on `resource-manager`, so we do not test it here -->
                    <argument>--exclude</argument>
                    <argument>${rust.appSubCrate}</argument>
                    <argument>--color</argument>
                    <argument>always</argument>
                  </arguments>
                  <skip>${skipTests}</skip>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>package-app</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <configuration>
              <executable>cargo</executable>
              <workingDirectory>${project.basedir}/rust</workingDirectory>
            </configuration>
            <executions>
              <execution>
                <id>build-rust-lib</id>
                <phase>prepare-package</phase>
                <configuration>
                  <arguments>
                    <argument>+${rust.compiler.version}</argument>
                    <argument>build</argument>
                    <argument>${build.cargoFlag}</argument>
                    <argument>--color</argument>
                    <argument>always</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
              <execution>
                <id>build-exonum-java</id>
                <phase>prepare-package</phase>
                <configuration>
                  <arguments>
                    <argument>+${rust.compiler.version}</argument>
                    <argument>build</argument>
                    <argument>--package</argument>
                    <argument>exonum-java</argument>
                    <argument>${build.cargoFlag}</argument>
                    <argument>--color</argument>
                    <argument>always</argument>
                  </arguments>
                </configuration>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- A profile that will make maven-clean-plugin also clean Rust target
         if cleanRust property is set. -->
    <profile>
      <id>clean-rust-target</id>
      <activation>
        <property>
          <name>cleanRust</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <configuration>
              <filesets>
                <fileset>
                  <directory>${rust.build.directory}</directory>
                </fileset>
              </filesets>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
