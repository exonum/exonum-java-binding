<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  <packaging>jar</packaging>

  <name>Exonum Service</name>
  <url>https://exonum.com/</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.compiler.source>8</java.compiler.source>
    <java.compiler.target>8</java.compiler.target>
    <junit.jupiter.version>5.4.0</junit.jupiter.version>
    <hamcrest.version>2.1</hamcrest.version>
    <mockito.version>2.24.0</mockito.version>
    <exonum.version>0.6.0-SNAPSHOT</exonum.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.exonum.binding</groupId>
        <artifactId>exonum-java-binding-bom</artifactId>
        <version>${exonum.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.jupiter.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
     <!-- Exonum *must* have 'provided' scope so that it and its dependencies are not included
         in the service artifact. Some of transitive dependencies of Exonum are safe
         and recommended to use in a service in 'provided' scope as well, because they will not
         be changed in an incompatible way in a compatible release of Exonum. Such dependencies
         are listed in exonum-java-binding-bom (e.g., guava, guice, gson, vertx, pf4j,
         protobuf-java). You can either use them implicitly as transitive dependencies
         (no extra POM modifications needed) or define explicitly below with 'provided' scope
         and NO version â€” it will be inherited from exonum-java-binding-bom.

         See also https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Transitive_Dependencies
         -->
    <dependency>
      <groupId>com.exonum.binding</groupId>
      <artifactId>exonum-java-binding-core</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <showWarnings>true</showWarnings>
          <source>${java.compiler.source}</source>
          <target>${java.compiler.target}</target>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.0</version>
        <configuration>
          <argLine>
            <!-- TODO: Replace with a path to the libjava_bindings.so to enable
                 integration tests that require a native library. -->
            -Djava.library.path=${project.basedir}/core/rust/target/debug
          </argLine>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>package-service-artifact</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
        <!-- This configuration produces a JAR file with this service definition in Exonum format -->
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <finalName>${project.artifactId}-${project.version}-artifact</finalName>
          <appendAssemblyId>false</appendAssemblyId>
          <archive>
            <manifestEntries>
              <Plugin-Id>${project.groupId}:${project.artifactId}:${project.version}</Plugin-Id>
              <Plugin-Version>${project.version}</Plugin-Version>
              <Plugin-Provider>${project.groupId}</Plugin-Provider>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
