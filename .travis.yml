language: java
dist: trusty
jdk:
  - openjdk8
  - openjdk10
sudo: false

addons:
  apt:
    packages:
    - build-essential
    - libssl-dev
    - pkg-config

env:
  global:
    - RUST_VERSION=stable
    - RUST_NIGHTLY_VERSION=nightly-2018-06-29
    - RUST_CLIPPY_VERSION=0.0.211
    - EJB_RUST_BUILD_DIR="$TRAVIS_BUILD_DIR/exonum-java-binding-core/rust/"

cache:
  directories:
    - "$HOME/.cargo"
    - "$HOME/.m2"

before_install:
  - export PATH="$PATH":"$HOME/.cargo/bin"
    # Install rustup if it's not already installed (i.e., not in CI cache).
  - which rustup > /dev/null || curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain "$RUST_VERSION"
    # Install nightly rust version and clippy.
  - rustup toolchain install $RUST_NIGHTLY_VERSION
  - cargo +$RUST_NIGHTLY_VERSION clippy -V | grep $RUST_CLIPPY_VERSION || cargo +$RUST_NIGHTLY_VERSION install clippy --vers $RUST_CLIPPY_VERSION --force
    # Set a toolchain as default.
  - rustup default "$RUST_VERSION"
    # Save the path to stdlib of the default toolchain to use it in scripts.
  - export RUST_LIB_DIR=$(rustup run "$RUST_VERSION" rustc --print sysroot)/lib
    # Install rustfmt.
  - rustup component add rustfmt-preview
  - rustfmt -V
    # Install cargo-audit if it's not already.
  - cargo-audit -V || cargo install cargo-audit --force
    # List all installed cargo packages.
  - cargo install --list
    # libjava_bindings.so and native application both need to load common Rust libs (eg libstd.so).
  - export LD_LIBRARY_PATH=$RUST_LIB_DIR:$LD_LIBRARY_PATH
    # force building instead of using from apt.
  - export SODIUM_BUILD=1
  - export ROCKSDB_BUILD=1
  - export SNAPPY_BUILD=1

install: true  # Skip the installation step, as Maven requires
               # several extra properties when run on a CI server (see below).
script:
  - cd "${EJB_RUST_BUILD_DIR}"
  - cargo fmt --all -- --write-mode=diff
  # TODO Remove when clippy is fixed https://github.com/rust-lang-nursery/rust-clippy/issues/2831
  # Next 2 lines are a workaround to prevent clippy checking dependencies.
  - cargo +${RUST_NIGHTLY_VERSION} check
  - cargo +${RUST_NIGHTLY_VERSION} clean -p java_bindings
  - cargo +${RUST_NIGHTLY_VERSION} clippy --all --tests --all-features -- -D warnings
  - cargo audit
  - cd -
  - ./run_all_tests.sh
  # Check silently for updates of dependencies
  - mvn versions:display-property-updates versions:display-dependency-updates | grep '\->' --context=3

notifications:
  slack:
    secure: m9GypuiO7oTg5/PoPfYvJRsx2x44q+TwBzLaDQegJZOhP6vNUrLHV06wCMund2SqVG3EwQkaVP4L0DmDLPFd/i+SXRPK0BUC+1G4HTp/VllmtkrebePqtlaXTrkJDHpxKLafaOOZd948LqsGs+PKehbKU5FJGeUcNgtsqkE/LZ4F9GgrWgQzh5qNrPK/dCS+svwiNSICJOtMp5rG84LAbCLHLMS9lII1Mo/ELsIsZ1OreHZjfcweQ/Br5vIqlH14s98y4CaZhvHy3F1KsP00HCltA4sQSokiMLh2wWlxtjY5bCP6tAUY3CP6sYDHE4WoRc2zu2RCo+D7J0N2i8y/KbuduCqXVnFv9vIc311DrkfazFV1WvJkND9h8RyNA73ZdhTCRAXGECTgxqr1HYPzk0Ox9D0jcPW/6uJOdYGfG+UwYTqbHL9bEsc6RW5hw+siyA5bcgZ+Ah8njzrc6Z+09CQnNqqfF6KbQoqUl9VipYWSomBMVA6SCaWVFXN7b/OnEkNWPj+GlPDkSEqH8cFHVJYD0AZ0V9TdwXNheyIc7Aq7E9eiR7g+OOnKPBC2sJaa04Ae+Q5nWPk3/UtZplg3lJTIqe3NgkNI5bIo0XzKA+xFpNIWbJnWko4oFwjFdfmgTuyyI76sVQNwxwfaUQfr6BtUyELrtwt4eM17BmB9Crk=
